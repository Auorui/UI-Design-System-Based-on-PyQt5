# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'document.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import math
import numpy as np
from PIL import Image
from natsort import natsorted
from datetime import datetime
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QFont, QDesktopServices, QIcon
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QMessageBox, QLabel, QDialog
from PyQt5 import QtCore, QtGui, QtWidgets
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

class Ui_BatchFileProcessingSystem(object):
    def setupUi(self, BatchFileProcessingSystem):
        BatchFileProcessingSystem.setObjectName("BatchFileProcessingSystem")
        BatchFileProcessingSystem.resize(1155, 660)
        self.centralwidget = QtWidgets.QWidget(BatchFileProcessingSystem)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(730, 260, 391, 75))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.SplittrainvalLab = QtWidgets.QLabel(self.layoutWidget)
        self.SplittrainvalLab.setMinimumSize(QtCore.QSize(185, 0))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.SplittrainvalLab.setFont(font)
        self.SplittrainvalLab.setObjectName("SplittrainvalLab")
        self.gridLayout_3.addWidget(self.SplittrainvalLab, 0, 0, 1, 1)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.trainratio = QtWidgets.QLabel(self.layoutWidget)
        self.trainratio.setMinimumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.trainratio.setFont(font)
        self.trainratio.setObjectName("trainratio")
        self.horizontalLayout_10.addWidget(self.trainratio)
        self.TrainLiEd = QtWidgets.QLineEdit(self.layoutWidget)
        self.TrainLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.TrainLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.TrainLiEd.setObjectName("TrainLiEd")
        self.horizontalLayout_10.addWidget(self.TrainLiEd)
        self.verticalLayout_5.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.valratio = QtWidgets.QLabel(self.layoutWidget)
        self.valratio.setMinimumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.valratio.setFont(font)
        self.valratio.setObjectName("valratio")
        self.horizontalLayout_11.addWidget(self.valratio)
        self.ValLiEd = QtWidgets.QLineEdit(self.layoutWidget)
        self.ValLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.ValLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.ValLiEd.setObjectName("ValLiEd")
        self.horizontalLayout_11.addWidget(self.ValLiEd)
        self.verticalLayout_5.addLayout(self.horizontalLayout_11)
        self.gridLayout_3.addLayout(self.verticalLayout_5, 0, 1, 2, 1)
        self.OnlycheckBox = QtWidgets.QCheckBox(self.layoutWidget)
        self.OnlycheckBox.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.OnlycheckBox.setFont(font)
        self.OnlycheckBox.setObjectName("OnlycheckBox")
        self.gridLayout_3.addWidget(self.OnlycheckBox, 1, 0, 1, 1)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(30, 30, 651, 511))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(730, 360, 401, 121))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.layoutWidget_2)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.BatchRenameLab = QtWidgets.QLabel(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.BatchRenameLab.setFont(font)
        self.BatchRenameLab.setObjectName("BatchRenameLab")
        self.gridLayout_4.addWidget(self.BatchRenameLab, 0, 0, 1, 1)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.StartIndexLab = QtWidgets.QLabel(self.layoutWidget_2)
        self.StartIndexLab.setMinimumSize(QtCore.QSize(100, 0))
        self.StartIndexLab.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.StartIndexLab.setFont(font)
        self.StartIndexLab.setObjectName("StartIndexLab")
        self.horizontalLayout_12.addWidget(self.StartIndexLab)
        self.StartLiEd = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.StartLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.StartLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.StartLiEd.setObjectName("StartLiEd")
        self.horizontalLayout_12.addWidget(self.StartLiEd)
        self.gridLayout_4.addLayout(self.horizontalLayout_12, 0, 1, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.PrefixLab = QtWidgets.QLabel(self.layoutWidget_2)
        self.PrefixLab.setMinimumSize(QtCore.QSize(100, 0))
        self.PrefixLab.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.PrefixLab.setFont(font)
        self.PrefixLab.setObjectName("PrefixLab")
        self.horizontalLayout_13.addWidget(self.PrefixLab)
        self.PrefixLiEd = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.PrefixLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.PrefixLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.PrefixLiEd.setObjectName("PrefixLiEd")
        self.horizontalLayout_13.addWidget(self.PrefixLiEd)
        self.verticalLayout_2.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.SuffixLab = QtWidgets.QLabel(self.layoutWidget_2)
        self.SuffixLab.setMinimumSize(QtCore.QSize(100, 30))
        self.SuffixLab.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.SuffixLab.setFont(font)
        self.SuffixLab.setObjectName("SuffixLab")
        self.horizontalLayout_14.addWidget(self.SuffixLab)
        self.SuffixLiEd = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.SuffixLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.SuffixLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.SuffixLiEd.setObjectName("SuffixLiEd")
        self.horizontalLayout_14.addWidget(self.SuffixLiEd)
        self.verticalLayout_2.addLayout(self.horizontalLayout_14)
        self.gridLayout_4.addLayout(self.verticalLayout_2, 1, 0, 1, 1)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.NumsLab = QtWidgets.QLabel(self.layoutWidget_2)
        self.NumsLab.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.NumsLab.setFont(font)
        self.NumsLab.setObjectName("NumsLab")
        self.horizontalLayout_15.addWidget(self.NumsLab)
        self.NumsLiEd = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.NumsLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.NumsLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.NumsLiEd.setObjectName("NumsLiEd")
        self.horizontalLayout_15.addWidget(self.NumsLiEd)
        self.verticalLayout_6.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.FormatLab = QtWidgets.QLabel(self.layoutWidget_2)
        self.FormatLab.setMinimumSize(QtCore.QSize(100, 30))
        self.FormatLab.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.FormatLab.setFont(font)
        self.FormatLab.setObjectName("FormatLab")
        self.horizontalLayout_16.addWidget(self.FormatLab)
        self.FormatLiEd = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.FormatLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.FormatLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.FormatLiEd.setObjectName("FormatLiEd")
        self.horizontalLayout_16.addWidget(self.FormatLiEd)
        self.verticalLayout_6.addLayout(self.horizontalLayout_16)
        self.gridLayout_4.addLayout(self.verticalLayout_6, 1, 1, 1, 1)
        self.HelpBt = QtWidgets.QPushButton(self.centralwidget)
        self.HelpBt.setGeometry(QtCore.QRect(570, 570, 109, 28))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.HelpBt.setFont(font)
        self.HelpBt.setObjectName("HelpBt")
        self.CleanBt = QtWidgets.QPushButton(self.centralwidget)
        self.CleanBt.setGeometry(QtCore.QRect(160, 570, 109, 28))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.CleanBt.setFont(font)
        self.CleanBt.setObjectName("CleanBt")
        self.ExitBt = QtWidgets.QPushButton(self.centralwidget)
        self.ExitBt.setGeometry(QtCore.QRect(290, 570, 109, 28))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.ExitBt.setFont(font)
        self.ExitBt.setObjectName("ExitBt")
        self.PFilePathLab = QtWidgets.QLabel(self.centralwidget)
        self.PFilePathLab.setGeometry(QtCore.QRect(730, 30, 281, 31))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(12)
        self.PFilePathLab.setFont(font)
        self.PFilePathLab.setObjectName("PFilePathLab")
        self.SFilePathBt = QtWidgets.QPushButton(self.centralwidget)
        self.SFilePathBt.setGeometry(QtCore.QRect(1070, 130, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(5)
        self.SFilePathBt.setFont(font)
        self.SFilePathBt.setObjectName("SFilePathBt")
        self.GrayLab = QtWidgets.QLabel(self.centralwidget)
        self.GrayLab.setGeometry(QtCore.QRect(730, 510, 271, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.GrayLab.setFont(font)
        self.GrayLab.setObjectName("GrayLab")
        self.PFilePathLiEd = QtWidgets.QLineEdit(self.centralwidget)
        self.PFilePathLiEd.setGeometry(QtCore.QRect(730, 60, 321, 30))
        self.PFilePathLiEd.setObjectName("PFilePathLiEd")
        self.ModifySizeLab = QtWidgets.QLabel(self.centralwidget)
        self.ModifySizeLab.setGeometry(QtCore.QRect(730, 200, 165, 30))
        self.ModifySizeLab.setMinimumSize(QtCore.QSize(165, 30))
        self.ModifySizeLab.setMaximumSize(QtCore.QSize(180, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.ModifySizeLab.setFont(font)
        self.ModifySizeLab.setObjectName("ModifySizeLab")
        self.layoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_3.setGeometry(QtCore.QRect(880, 200, 103, 32))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.HLab = QtWidgets.QLabel(self.layoutWidget_3)
        self.HLab.setMaximumSize(QtCore.QSize(20, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.HLab.setFont(font)
        self.HLab.setObjectName("HLab")
        self.horizontalLayout_17.addWidget(self.HLab)
        self.HLiEd = QtWidgets.QLineEdit(self.layoutWidget_3)
        self.HLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.HLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.HLiEd.setObjectName("HLiEd")
        self.horizontalLayout_17.addWidget(self.HLiEd)
        self.layoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_4.setGeometry(QtCore.QRect(1013, 201, 107, 32))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.WLab = QtWidgets.QLabel(self.layoutWidget_4)
        self.WLab.setMaximumSize(QtCore.QSize(20, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.WLab.setFont(font)
        self.WLab.setObjectName("WLab")
        self.horizontalLayout_18.addWidget(self.WLab)
        self.WLiEd = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.WLiEd.setMinimumSize(QtCore.QSize(80, 30))
        self.WLiEd.setMaximumSize(QtCore.QSize(80, 30))
        self.WLiEd.setObjectName("WLiEd")
        self.horizontalLayout_18.addWidget(self.WLiEd)
        self.StartBt = QtWidgets.QPushButton(self.centralwidget)
        self.StartBt.setGeometry(QtCore.QRect(30, 570, 109, 28))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.StartBt.setFont(font)
        self.StartBt.setObjectName("StartBt")
        self.SFilePathLab = QtWidgets.QLabel(self.centralwidget)
        self.SFilePathLab.setGeometry(QtCore.QRect(730, 100, 281, 31))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(12)
        self.SFilePathLab.setFont(font)
        self.SFilePathLab.setObjectName("SFilePathLab")
        self.SFilePathLiEd = QtWidgets.QLineEdit(self.centralwidget)
        self.SFilePathLiEd.setGeometry(QtCore.QRect(730, 130, 321, 30))
        self.SFilePathLiEd.setObjectName("SFilePathLiEd")
        self.MSLab = QtWidgets.QLabel(self.centralwidget)
        self.MSLab.setGeometry(QtCore.QRect(730, 570, 271, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.MSLab.setFont(font)
        self.MSLab.setObjectName("MSLab")
        self.PFilePathBt = QtWidgets.QPushButton(self.centralwidget)
        self.PFilePathBt.setGeometry(QtCore.QRect(1070, 60, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(5)
        self.PFilePathBt.setFont(font)
        self.PFilePathBt.setObjectName("PFilePathBt")
        self.RecordBt = QtWidgets.QPushButton(self.centralwidget)
        self.RecordBt.setGeometry(QtCore.QRect(430, 570, 109, 28))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(10)
        self.RecordBt.setFont(font)
        self.RecordBt.setObjectName("RecordBt")
        self.MSCBox = QtWidgets.QComboBox(self.centralwidget)
        self.MSCBox.setGeometry(QtCore.QRect(1000, 570, 120, 30))
        self.MSCBox.setObjectName("MSCBox")
        self.MSCBox.addItem("")
        self.MSCBox.addItem("")
        self.GrayCBox = QtWidgets.QComboBox(self.centralwidget)
        self.GrayCBox.setGeometry(QtCore.QRect(1000, 510, 120, 30))
        self.GrayCBox.setObjectName("GrayCBox")
        self.GrayCBox.addItem("")
        self.GrayCBox.addItem("")
        BatchFileProcessingSystem.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(BatchFileProcessingSystem)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1155, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        BatchFileProcessingSystem.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(BatchFileProcessingSystem)
        self.statusbar.setObjectName("statusbar")
        BatchFileProcessingSystem.setStatusBar(self.statusbar)
        self.Helpaction = QtWidgets.QAction(BatchFileProcessingSystem)
        self.Helpaction.setObjectName("Helpaction")
        self.Exitaction = QtWidgets.QAction(BatchFileProcessingSystem)
        self.Exitaction.setObjectName("Exitaction")
        self.menu.addAction(self.Helpaction)
        self.menu.addAction(self.Exitaction)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(BatchFileProcessingSystem)
        QtCore.QMetaObject.connectSlotsByName(BatchFileProcessingSystem)

    def retranslateUi(self, BatchFileProcessingSystem):
        _translate = QtCore.QCoreApplication.translate
        BatchFileProcessingSystem.setWindowTitle(_translate("BatchFileProcessingSystem", "MainWindow"))
        self.SplittrainvalLab.setText(_translate("BatchFileProcessingSystem", "划分训练集与验证集"))
        self.trainratio.setText(_translate("BatchFileProcessingSystem", "train ratio:"))
        self.valratio.setText(_translate("BatchFileProcessingSystem", "val ratio:  "))
        self.OnlycheckBox.setText(_translate("BatchFileProcessingSystem", "Only image name"))
        self.BatchRenameLab.setText(_translate("BatchFileProcessingSystem", "批量重命名"))
        self.StartIndexLab.setText(_translate("BatchFileProcessingSystem", "起始数："))
        self.PrefixLab.setText(_translate("BatchFileProcessingSystem", "前缀："))
        self.SuffixLab.setText(_translate("BatchFileProcessingSystem", "后缀："))
        self.NumsLab.setText(_translate("BatchFileProcessingSystem", "数字长度："))
        self.FormatLab.setText(_translate("BatchFileProcessingSystem", "格式："))
        self.HelpBt.setText(_translate("BatchFileProcessingSystem", "帮助"))
        self.CleanBt.setText(_translate("BatchFileProcessingSystem", "清除"))
        self.ExitBt.setText(_translate("BatchFileProcessingSystem", "退出"))
        self.PFilePathLab.setText(_translate("BatchFileProcessingSystem", "选择处理文件路径："))
        self.SFilePathBt.setText(_translate("BatchFileProcessingSystem", "·····"))
        self.GrayLab.setText(_translate("BatchFileProcessingSystem", "是否对数据进行灰度化处理："))
        self.ModifySizeLab.setText(_translate("BatchFileProcessingSystem", "修改图像大小"))
        self.HLab.setText(_translate("BatchFileProcessingSystem", "H"))
        self.WLab.setText(_translate("BatchFileProcessingSystem", "W"))
        self.StartBt.setText(_translate("BatchFileProcessingSystem", "开始"))
        self.SFilePathLab.setText(_translate("BatchFileProcessingSystem", "选择保存文件路径："))
        self.MSLab.setText(_translate("BatchFileProcessingSystem", "是否计算数据的均值标准值："))
        self.PFilePathBt.setText(_translate("BatchFileProcessingSystem", "······"))
        self.RecordBt.setText(_translate("BatchFileProcessingSystem", "记录"))
        self.MSCBox.setItemText(0, _translate("BatchFileProcessingSystem", "否"))
        self.MSCBox.setItemText(1, _translate("BatchFileProcessingSystem", "是"))
        self.GrayCBox.setItemText(0, _translate("BatchFileProcessingSystem", "否"))
        self.GrayCBox.setItemText(1, _translate("BatchFileProcessingSystem", "是"))
        self.menu.setTitle(_translate("BatchFileProcessingSystem", "选项"))
        self.Helpaction.setText(_translate("BatchFileProcessingSystem", "帮助"))
        self.Exitaction.setText(_translate("BatchFileProcessingSystem", "退出"))



class BatchFileProcessingSystem(QMainWindow, Ui_BatchFileProcessingSystem):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.global_definition()
        self.PrepParameters()
        self.CallBackFunctions()
        self.setWindowIcon(QIcon("instructions/icon/document.ico"))  # 修改为你的图标路径
        self.setWindowTitle("批量文件处理系统 BatchVision")
        self.setStyleSheet("""
            QMainWindow {
                background-color: #F5F5F5;
            }
            QPlainTextEdit {
                background-color: white;
                border: 2px solid #D3D3D3;
                border-radius: 5px;
                padding: 10px;
            }
        """)

    def global_definition(self):
        self.times_str = f'{datetime.now().strftime("%Y_%m_%d_%H_%M_%S")}'
        self.font = QFont('Times New Roman', 15)  # 设置字体为 'Times New Roman'，大小为 15

    def PrepParameters(self):
        # 选择需要处理的图像文件夹路径
        self.PFilePath = r" "
        # 需要保存的图像文件夹路径
        self.SFilePath = r" "
        self.PFilePathLiEd.setText(self.PFilePath)
        self.SFilePathLiEd.setText(self.SFilePath)
        self.plainTextEdit.setFont(self.font)
        self.Exitaction.setEnabled(True)
        self.Helpaction.setEnabled(True)

    def CallBackFunctions(self):
        self.PFilePathBt.clicked.connect(self.SetPFilePath)
        self.SFilePathBt.clicked.connect(self.SetSFilePath)
        self.StartBt.clicked.connect(self.StartProcessFolder)
        self.ExitBt.clicked.connect(self.close_application)  # 退出按钮
        self.HelpBt.clicked.connect(self.show_help_info)     # 帮助按钮
        self.CleanBt.clicked.connect(self.clear_plaintext)   # 文本清除按钮
        self.RecordBt.clicked.connect(self.save_plaintext)   # 文本记录按钮
        self.Helpaction.triggered.connect(self.show_help_info)  # 菜单栏帮助键
        self.Exitaction.triggered.connect(self.close_application)  # 菜单栏退出键

    def StartProcessFolder(self):
        if not self.check_pfilepath():
            return
        if not self.check_sfilepath():
            return
        self.is_gray = self.GrayCBox.currentIndex()
        self.is_meanstd = self.MSCBox.currentIndex()
        self.only_image_name = self.OnlycheckBox.isChecked()
        self.batch_images_paths = self.get_image_path(self.PFilePath)
        try:
            # 标志位判断是否有有效操作
            has_operation = False
            if self.check_dataset_split_needed():
                self.split_dataset(self.batch_images_paths, self.only_image_name)
                has_operation = True

            if self.check_rename_needed() or self.check_resize_needed() or \
                    self.is_gray == 1 or self.is_meanstd == 1:
                if self.check_resize_needed():
                    need_resize = True
                else:
                    need_resize = False
                self.rename_images(self.batch_images_paths, resize=need_resize,
                                   to_gray=self.is_gray, meanstd=self.is_meanstd)
                has_operation = True

            # 如果没有检测到任何有效操作
            if not has_operation:
                QMessageBox.warning(self, "警告", "未检测到有效操作，请至少填写一个功能的参数！")

        except Exception as e:
            QMessageBox.critical(self, "错误", f"处理过程中发生错误：{str(e)}")

    def split_dataset(self, images_paths, only_image_name=False):
        test_ratio = 1. - (self.train_ratio + self.val_ratio)

        num_images = len(images_paths)
        num_train = round(num_images * self.train_ratio)
        num_val = num_images - num_train if test_ratio == 0 else math.ceil(num_images * self.val_ratio)
        num_test = 0 if test_ratio == 0 else num_images - (num_train + num_val)

        with open(os.path.join(self.SFilePath, 'train.txt'), 'w') as train_file, \
                open(os.path.join(self.SFilePath, 'val.txt'), 'w') as val_file, \
                open(os.path.join(self.SFilePath, 'test.txt'), 'w') as test_file:
            for i, image_path in enumerate(images_paths):
                if only_image_name:
                    image_name, _ = os.path.splitext(os.path.basename(image_path))
                else:
                    image_name = image_path
                if i < num_train:
                    train_file.write(f"{image_name}\n")
                    self.append_to_plaintext(f"{i} {image_name} 被写入训练集")
                elif i < num_train + num_val:
                    val_file.write(f"{image_name}\n")
                    self.append_to_plaintext(f"{i} {image_name} 被写入验证集")
                else:
                    test_file.write(f"{image_name}\n")
                    self.append_to_plaintext(f"{i} {image_name} 被写入测试集")

        self.append_to_plaintext(f"Successfully split {num_images} images into {num_train} train, {num_val} val, and {num_test} test.")

    def rename_images(self, images_paths, resize=False, to_gray=0, meanstd=0):
        start_index = self.rename_params['start']
        prefix = self.rename_params['prefix']
        suffix = self.rename_params['suffix']
        read_flag = 'RGB' if to_gray == 0 else 'L'
        num_images = len(images_paths)
        mean_sum = np.zeros(3)
        std_sum = np.zeros(3)
        for i, image_path in enumerate(images_paths):
            image_name = os.path.basename(image_path)
            name, ext = os.path.splitext(image_name)
            re_ext = f".{self.rename_params['format']}" if self.rename_params['format'] is not None else ext
            if start_index:
                padded_i = str(start_index).zfill(self.rename_params['digits'])
                start_index += 1
            else:
                padded_i = name
            new_image_name = f"{prefix}{padded_i}{suffix}{re_ext}"
            new_path = os.path.join(self.SFilePath, new_image_name)
            try:
                image = Image.open(image_path).convert(read_flag)
                if meanstd == 1:
                    pil_image = Image.open(image_path).convert('RGB')
                    img_asarray = np.asarray(pil_image) / 255.0
                    individual_mean = np.mean(img_asarray, axis=(0, 1))
                    individual_stdev = np.std(img_asarray, axis=(0, 1))
                    mean_sum += individual_mean
                    std_sum += individual_stdev
                if resize:
                    image = image.resize((self.width, self.height))
                image.save(new_path)
                self.append_to_plaintext(f"{i+1} Successfully process {image_path} to {new_path}\n")
                # shutil.copy(image_path, new_path)
            except Exception as e:
                self.append_to_plaintext(f"Error read {image_path}: {e}")
        if meanstd:
            mean = (mean_sum / num_images).astype(np.float32)
            std = (std_sum / num_images).astype(np.float32)
            self.append_to_plaintext(f"最终的均值为:{mean}, 标准值为:{std}")


    def check_dataset_split_needed(self):
        """检查是否需要划分数据集"""
        try:
            train_text = self.TrainLiEd.text().strip()
            val_text = self.ValLiEd.text().strip()

            if not train_text and not val_text:
                return False

            # 如果任一输入框有内容
            if train_text or val_text:
                self.train_ratio = float(train_text) if train_text else 0.0
                self.val_ratio = float(val_text) if val_text else 0.0

                # 验证比例范围
                if not (0.0 <= self.train_ratio <= 1.0) or not (0.0 <= self.val_ratio <= 1.0):
                    raise ValueError(f"比例值必须在0到1之间, 但是train_ratio={self.train_ratio},"
                                     f"val_ratio={self.val_ratio}")

                # 验证比例和
                if self.train_ratio + self.val_ratio > 1.0:
                    raise ValueError("训练集和验证集比例之和必须小于1")

                return True
            return False
        except ValueError as e:
            raise ValueError(f"数据集划分参数错误：{str(e)}")

    def check_resize_needed(self):
        """检查是否需要修改图像尺寸"""
        try:
            # 检查是否有任一尺寸输入
            if self.HLiEd.text().strip() or self.WLiEd.text().strip():
                self.height = int(self.HLiEd.text()) if self.HLiEd.text().strip() else 0
                self.width = int(self.WLiEd.text()) if self.WLiEd.text().strip() else 0

                if self.height <= 0 and self.width <= 0:
                    raise ValueError("高度和宽度至少需要输入一个有效值")

                if self.height < 0 or self.width < 0:
                    raise ValueError("尺寸值不能为负数")

                return True
            return False
        except ValueError as e:
            raise ValueError(f"尺寸参数错误：{str(e)}")

    def check_rename_needed(self):
        """检查是否需要批量重命名"""
        try:
            # 初始化所有参数为 ''
            self.rename_params = {
                'prefix': '',
                'suffix': '',
                'start': '',
                'digits': '',
                'format': ''
            }

            # ----------------------------
            # 1. 获取输入值（保持原始字符串）
            # ----------------------------
            input_params = {
                'prefix': self.PrefixLiEd.text().strip(),
                'suffix': self.SuffixLiEd.text().strip(),
                'start': self.StartLiEd.text().strip(),
                'digits': self.NumsLiEd.text().strip(),
                'format': self.FormatLiEd.text().strip().lower()
            }

            # ----------------------------
            # 2. 有效性检查和默认值处理
            # ----------------------------
            error_messages = []
            has_operation = False

            # 前缀检查
            if input_params['prefix']:
                if any(c in input_params['prefix'] for c in '/\\:*?"<>|'):
                    error_messages.append("前缀包含非法字符（如 / : * ? 等）")
                else:
                    self.rename_params['prefix'] = input_params['prefix']
                    has_operation = True

            # 后缀检查
            if input_params['suffix']:
                if '.' in input_params['suffix']:
                    error_messages.append("后缀不应包含扩展名（如 .jpg）")
                else:
                    self.rename_params['suffix'] = input_params['suffix']
                    has_operation = True

            # 起始数检查
            if input_params['start']:
                try:
                    start = int(input_params['start'])
                    if start < 0:
                        error_messages.append("起始数不能为负数")
                    else:
                        self.rename_params['start'] = start
                        has_operation = True
                except ValueError:
                    error_messages.append("起始数必须为整数")
            else:
                self.rename_params['start'] = None

            # 数字长度检查
            if input_params['digits']:
                try:
                    digits = int(input_params['digits'])
                    if not (1 <= digits <= 10):
                        error_messages.append("数字长度需在1~10之间")
                    else:
                        self.rename_params['digits'] = digits
                        has_operation = True
                except ValueError:
                    error_messages.append("数字长度必须为整数")
            else:
                self.rename_params['digits'] = 1

            # 格式检查
            if input_params['format']:
                if input_params['format'] not in ['jpg', 'png', 'jpeg', 'bmp']:
                    error_messages.append(f"不支持格式：{input_params['format']}，支持格式：jpg/png/jpeg/bmp")
                else:
                    self.rename_params['format'] = input_params['format']
                    has_operation = True
            else:
                self.rename_params['format'] = None

            # ----------------------------
            # 3. 错误处理与返回
            # ----------------------------
            if error_messages:
                raise ValueError("\n".join(error_messages))
            return has_operation

        except ValueError as e:
            QMessageBox.warning(self, "参数错误", str(e))
            return False

    def check_pfilepath(self):
        """检查处理文件夹路径的有效性"""
        try:
            # 去除路径两端的空格
            path = self.PFilePath.strip()

            # 检查路径是否为空
            if not path:
                raise ValueError("处理文件夹路径未设置，请先选择输入路径")

            # 检查路径是否存在
            if not os.path.exists(path):
                raise FileNotFoundError(f"处理文件夹不存在：{path}")

            # 检查是否是目录
            if not os.path.isdir(path):
                raise NotADirectoryError(f"路径不是有效文件夹：{path}")

            # 检查是否可读
            if not os.access(path, os.R_OK):
                raise PermissionError(f"没有读取权限：{path}")

            return True

        except Exception as e:
            QMessageBox.critical(self, "路径错误", f"处理路径验证失败：\n{str(e)}")
            # 清空无效路径显示
            self.PFilePathLiEd.clear()
            self.PFilePath = ""
            return False

    def check_sfilepath(self):
        """检查保存文件夹路径的有效性"""
        try:
            original_path = self.SFilePath.strip()

            if not original_path:
                raise ValueError("保存文件夹路径未设置，请先选择输出路径")

            # 判断是否需要添加时间戳
            need_timestamp = False
            if os.path.exists(original_path):
                # 检查文件夹是否非空（排除隐藏文件如 .DS_Store）
                if any(f for f in os.listdir(original_path) if not f.startswith('.')):
                    need_timestamp = True
            else:
                # 路径不存在时直接创建父目录
                os.makedirs(original_path, exist_ok=True)

            # 需要添加时间戳子目录
            if need_timestamp:
                final_path = os.path.join(original_path, self.times_str)
                self.append_to_plaintext(f"检测到目标文件夹非空，已自动创建时间戳子目录：\n{final_path}")
            else:
                final_path = original_path

            # 确保最终路径存在
            os.makedirs(final_path, exist_ok=True)

            # 路径有效性验证
            if not os.path.isdir(final_path):
                raise NotADirectoryError(f"路径不是有效文件夹：{final_path}")
            if not os.access(final_path, os.W_OK):
                raise PermissionError(f"没有写入权限：{final_path}")

            # 更新实际保存路径
            self.SFilePath = os.path.join(final_path, "")
            self.SFilePathLiEd.setText(self.SFilePath)  # 更新UI显示

            return True

        except Exception as e:
            QMessageBox.critical(self, "路径错误", f"保存路径验证失败：\n{str(e)}")
            self.SFilePathLiEd.clear()
            self.SFilePath = ""
            return False

    def SetPFilePath(self):
        dirname = QFileDialog.getExistingDirectory(self, "浏览", '.')
        if dirname:
            self.PFilePathLiEd.setText(dirname)
            self.PFilePath = dirname + '/'

    def SetSFilePath(self):
        dirname = QFileDialog.getExistingDirectory(self, "浏览", '.')
        if dirname:
            self.SFilePathLiEd.setText(dirname)
            self.SFilePath = dirname + '/'

    def append_to_plaintext(self, message):
        """将信息显示在 plainTextEdit 中"""
        # print(f"Appending message: {message}")  # 调试输出
        self.plainTextEdit.appendPlainText(message)
        QApplication.processEvents()

    def clear_plaintext(self):
        """清空 plainTextEdit 内容"""
        self.plainTextEdit.clear()

    def save_plaintext(self):
        """保存 plainTextEdit 的内容到文本文件"""
        # 弹出保存文件对话框
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(self, "保存文件", "", "Text Files (*.txt);;All Files (*)",
                                                   options=options)
        if file_name:
            try:
                with open(file_name, 'w', encoding='utf-8') as file:
                    # file.write(self.plainTextEdit.toPlainText())  # 获取 plainTextEdit 的内容并写入文件
                    file.write(self.plainTextEdit.toPlainText())
                QMessageBox.information(self, "保存成功", f"文件已保存至: {file_name}")
            except Exception as e:
                QMessageBox.warning(self, "保存失败", f"无法保存文件: {e}")

    def get_image_path(self, path):
        """
        获取当前文件夹下符合图像格式的图像路径，并修正了转义字符的问题
        详见: https://blog.csdn.net/m0_62919535/article/details/132199978
        """
        imgfile = []
        file_list = os.listdir(path)
        for i in file_list:
            new_path = os.path.join(path, i).replace("\\", "/")
            _, file_ext = os.path.splitext(new_path)
            if file_ext[1:] in ('bmp', 'dng', 'jpeg', 'jpg', 'mpo', 'png', 'tif', 'tiff', 'webp', 'pfm'):
                imgfile.append(new_path)
        return natsorted(imgfile)

    def close_application(self):
        """关闭应用程序"""
        reply = QMessageBox.question(self, '退出', '您确定要退出程序吗?', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            QApplication.quit()

    def show_help_info(self):
        """显示软件信息（支持超链接）"""
        help_html = """
        <style>
        a { color: #0078d4; text-decoration: none; }
        a:hover { text-decoration: underline; }
        </style>

        <p><b>▌软件名称：</b>BatchVision Toolkit</p>
        <p><b>▌当前版本：</b>V1.0 (2025-Release)</p>

        <p><b>▌核心功能：</b></p>
        <ul>
            <li>✓ 智能文件批处理（重命名/格式转换/尺寸调整）</li>
            <li>✓ 数据集划分（训练集/验证集/测试集）</li>
            <li>✓ 图像统计分析（均值/标准差计算）</li>
            <li>✓ 灰度化处理与元数据保留</li>
            <li>✓ 多格式支持：bmp/jpg/png/tiff/webp等12种格式</li>
        </ul>

        <p><b>▌作者：</b>Junrui Zeng (Auorui)</p>
        <p><b>▌微信支持：</b>zjricetea（备注"BatchVision支持"）</p>

        <p><b>▌项目地址：</b>
        <a href="https://github.com/Auorui/UI-Design-System-Based-on-PyQt5">GitHub项目主页</a></p>

        <p><b>▌使用须知：</b></p>
        <ol>
            <li>推荐使用RGB格式原始图像</li>
            <li>批量操作前请做好数据备份</li>
            <li>高分辨率图像处理需要预留足够存储空间</li>
        </ol>
        """
        msg_box = QMessageBox()
        msg_box.setWindowTitle("软件信息")
        msg_box.setTextFormat(1)  # 1表示RichText
        msg_box.setText(help_html)
        # 设置对话框样式
        msg_box.setStyleSheet("""
            QMessageBox {
                font-family: 'Microsoft YaHei';
                font-size: 12pt;
                min-width: 600px;
            }
            QMessageBox QLabel {
                line-height: 1.6;
            }
        """)
        # 添加确认按钮
        msg_box.addButton(QMessageBox.Ok)
        msg_box.exec_()
        # 链接点击处理（需放在exec_()之后）
        msg_box.findChild(QLabel).linkActivated.connect(lambda link: QDesktopServices.openUrl(QUrl(link)))

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = BatchFileProcessingSystem()
    window.show()
    sys.exit(app.exec_())